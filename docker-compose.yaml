services:

  builder:
    image: builder-osintranet
    environment: 
      - DOTNET_RUNNING_IN_CONTAINER=true
    build:
      context: .
      dockerfile: OSDevGrp.OSIntranet.Builder.Dockerfile
    restart: "no"

  executor:
    image: executor-osintranet
    depends_on:
      - builder
    build:
      context: .
      dockerfile: OSDevGrp.OSIntranet.Executor.Dockerfile
      args:
        appUserGroup: ${appUserGroup}
        nonRootUser: ${nonRootUser}
        nonRootPassword: ${nonRootPassword}
        sshPassword: ${sshPasswordExecutor}
    restart: "no"

  reverseproxy:
    image: reverseproxy-osintranet
    depends_on:
      - mvc
      - webapi
    build:
      context: .
      dockerfile: Nginx.Dockerfile
      args:
        certificateSubject: /C=DK/ST=/L=Copenhagen/O=OS Development Group/OU=/CN=localhost
        certificatePassword: MjRiZmUzMjItZDExMi00NzcwLTg2ZGEtMGY1ZDdjMGQ0ZDAz
    ports:
      - "80:80"
      - "443:443"
      - "8443:8443"
      - "8445:8445"
    restart: always

  mvc:
    image: mvc-osintranet
    environment: 
      - TZ=Europe/Copenhagen
      - DOTNET_RUNNING_IN_CONTAINER=true
      - ASPNETCORE_HTTP_PORTS=8080
      - NON_ROOT_USER=${nonRootUser}
      - SUDO_ASKPASS=/usr/local/bin/askpw
      - connectionStrings__OSIntranet=${connectionStringsMvc}
      - Security__OIDC__Authority=${securityOidcAuthority}
      - Security__OIDC__ClientId=${securityOidcClientIdMvc}
      - Security__OIDC__ClientSecret=${securityOidcClientSecretMvc}
      - Security__Microsoft__ClientId=${securityMicrosoftClientId}
      - Security__Microsoft__ClientSecret=${securityMicrosoftClientSecret}
      - Security__Microsoft__Tenant=${securityMicrosoftTenant}
      - Security__Google__ClientId=${securityGoogleClientId}
      - Security__Google__ClientSecret=${securityGoogleClientSecret}
      - Security__TrustedDomainCollection=${securityTrustedDomainCollection}
      - Security__AcmeChallenge__WellKnownChallengeToken=${securityAcmeChallengeWellKnownChallengeTokenMvc}
      - Security__AcmeChallenge__ConstructedKeyAuthorization=${securityAcmeChallengeConstructedKeyAuthorizationMvc}
      - ExternalData__Dashboard__EndpointAddress=${externalDataDashboardEndpointAddress}
    depends_on:
      - executor
    build:
      context: .
      dockerfile: OSDevGrp.OSIntranet.Mvc.Dockerfile
      args:
        appUserGroup: ${appUserGroup}
        nonRootUser: ${nonRootUser}
      cache_from:
        - builder-osintranet
        - executor-osintranet
    expose:
      - "8080"
      - "2222"
    restart: always

  webapi:
    image: webapi-osintranet
    environment: 
      - TZ=Europe/Copenhagen
      - DOTNET_RUNNING_IN_CONTAINER=true
      - ASPNETCORE_HTTP_PORTS=8080
      - NON_ROOT_USER=${nonRootUser}
      - SUDO_ASKPASS=/usr/local/bin/askpw
      - connectionStrings__OSIntranet=${connectionStringsWebApi}
      - Security__Microsoft__ClientId=${securityMicrosoftClientId}
      - Security__Microsoft__ClientSecret=${securityMicrosoftClientSecret}
      - Security__Google__ClientId=${securityGoogleClientId}
      - Security__Google__ClientSecret=${securityGoogleClientSecret}
      - Security__TrustedDomainCollection=${securityTrustedDomainCollection}
      - Security__JWT__Key__kty=${securityJwtKeyKty}
      - Security__JWT__Key__n=${securityJwtKeyN}
      - Security__JWT__Key__e=${securityJwtKeyE}
      - Security__JWT__Key__d=${securityJwtKeyD}
      - Security__JWT__Key__dp=${securityJwtKeyDP}
      - Security__JWT__Key__dq=${securityJwtKeyDQ}
      - Security__JWT__Key__p=${securityJwtKeyP}
      - Security__JWT__Key__q=${securityJwtKeyQ}
      - Security__JWT__Key__qi=${securityJwtKeyQI}
      - Security__JWT__Issuer=${securityJwtIssuer}
      - Security__JWT__Audience=${securityJwtAudience}
      - Security__AcmeChallenge__WellKnownChallengeToken=${securityAcmeChallengeWellKnownChallengeTokenWebApi}
      - Security__AcmeChallenge__ConstructedKeyAuthorization=${securityAcmeChallengeConstructedKeyAuthorizationWebApi}
    depends_on:
      - executor
    build:
      context: .
      dockerfile: OSDevGrp.OSIntranet.WebApi.Dockerfile
      args:
        appUserGroup: ${appUserGroup}
        nonRootUser: ${nonRootUser}
      cache_from:
        - builder-osintranet
        - executor-osintranet
    expose:
      - "8080"
      - "2222"
    restart: always

  bff:
    image: bff-osintranet
    environment: 
      - TZ=Europe/Copenhagen
      - DOTNET_RUNNING_IN_CONTAINER=true
      - ASPNETCORE_HTTP_PORTS=8080
      - NON_ROOT_USER=${nonRootUser}
      - SUDO_ASKPASS=/usr/local/bin/askpw
      - ServiceGateways__WebApi__EndpointAddress=${serviceGatewaysWebApiEndpointAddress}
      - ServiceGateways__WebApi__ClientId=${securityOidcClientIdBff}
      - ServiceGateways__WebApi__ClientSecret=${securityOidcClientSecretBff}
    depends_on:
      - executor
    build:
      context: .
      dockerfile: OSDevGrp.OSIntranet.Bff.WebApi.Dockerfile
      args:
        appUserGroup: ${appUserGroup}
        nonRootUser: ${nonRootUser}
      cache_from:
        - builder-osintranet
        - executor-osintranet
    expose:
      - "8080"
      - "2222"
    restart: always

  certbot:
    image: certbot-osintranet
    build:
      context: .
      dockerfile: Certbot.Dockerfile
      args:
        sshPassword: ${sshPasswordCertbot}
    ports:
      - "8022:2222"
    restart: "always"
    volumes:
      - letsencrypt-config:/etc/letsencrypt
      - letsencrypt-data:/var/lib/letsencrypt

volumes:
  letsencrypt-config:
  letsencrypt-data: