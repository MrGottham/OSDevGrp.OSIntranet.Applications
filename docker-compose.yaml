version: "3.7"

services:

  builder:
    image: builder-osintranet
    build:
      context: .
      dockerfile: OSDevGrp.OSIntranet.Builder.Dockerfile
    restart: "no"

  executor:
    image: executor-osintranet
    depends_on:
      - builder
    build:
      context: .
      dockerfile: OSDevGrp.OSIntranet.Executor.Dockerfile
      args:
        appUserGroup: [TBD]
        nonRootUser: [TBD]
        nonPassword: [TBD]
        sshPassword: [TBD]
    restart: "no"

  reverseproxy:
    image: reverseproxy-osintranet
    depends_on:
      - mvc
      - webapi
    build:
      context: .
      dockerfile: Nginx.Dockerfile
      args:
        certificateSubject: /C=DK/ST=/L=Copenhagen/O=OS Development Group/OU=/CN=localhost
        certificatePassword: MjRiZmUzMjItZDExMi00NzcwLTg2ZGEtMGY1ZDdjMGQ0ZDAz
    ports:
      - "80:80"
      - "443:443"
      - "8443:8443"
    restart: always

  mvc:
    image: mvc-osintranet
    environment: 
      - TZ=Europe/Copenhagen
      - DOTNET_RUNNING_IN_CONTAINER=true
      - ASPNETCORE_HTTP_PORTS=8080
      - NON_ROOT_USER=[TBD]
      - SUDO_ASKPASS=/usr/local/bin/askpw
      - connectionStrings__OSIntranet=[TBD]
      - Security__Microsoft__ClientId=[TBD]
      - Security__Microsoft__ClientSecret=[TBD]
      - Security__Microsoft__Tenant=[TBD]
      - Security__Google__ClientId=[TBD]
      - Security__Google__ClientSecret=[TBD]
      - Security__TrustedDomainCollection=[TBD]
      - Security__AcmeChallenge__WellKnownChallengeToken=[TBD]
      - Security__AcmeChallenge__ConstructedKeyAuthorization=[TBD]
      - ExternalData__Dashboard__EndpointAddress=[TBD]
    depends_on:
      - executor
    build:
      context: .
      dockerfile: OSDevGrp.OSIntranet.Mvc.Dockerfile
      args:
        appUserGroup: [TBD]
        nonRootUser: [TBD]
      cache_from:
        - builder-osintranet
        - executor-osintranet
    expose:
      - "8080"
      - "2222"
    restart: always

  webapi:
    image: webapi-osintranet
    environment: 
      - TZ=Europe/Copenhagen
      - DOTNET_RUNNING_IN_CONTAINER=true
      - ASPNETCORE_HTTP_PORTS=8080
      - NON_ROOT_USER=[TBD]
      - SUDO_ASKPASS=/usr/local/bin/askpw
      - connectionStrings__OSIntranet=[TBD]
      - Security__Microsoft__ClientId=[TBD]
      - Security__Microsoft__ClientSecret=[TBD]
      - Security__Google__ClientId=[TBD]
      - Security__Google__ClientSecret=[TBD]
      - Security__TrustedDomainCollection=[TBD]
      - Security__JWT__Key__kty=[TBD]
      - Security__JWT__Key__n=[TBD]
      - Security__JWT__Key__e=[TBD]
      - Security__JWT__Key__d=[TBD]
      - Security__JWT__Key__dp=[TBD]
      - Security__JWT__Key__dq=[TBD]
      - Security__JWT__Key__p=[TBD]
      - Security__JWT__Key__q=[TBD]
      - Security__JWT__Key__qi=[TBD]
      - Security__JWT__Issuer=[TBD]
      - Security__JWT__Audience=[TBD]
      - Security__AcmeChallenge__WellKnownChallengeToken=[TBD]
      - Security__AcmeChallenge__ConstructedKeyAuthorization=[TBD]
    depends_on:
      - executor
    build:
      context: .
      dockerfile: OSDevGrp.OSIntranet.WebApi.Dockerfile
      args:
        appUserGroup: [TBD]
        nonRootUser: [TBD]
      cache_from:
        - builder-osintranet
        - executor-osintranet
    expose:
      - "8080"
      - "2222"
    restart: always

  certbot:
    image: certbot-osintranet
    build:
      context: .
      dockerfile: Certbot.Dockerfile
      args:
        sshPassword: [TBD]
    ports:
      - "8022:2222"
    restart: "always"
    volumes:
      - letsencrypt-config:/etc/letsencrypt
      - letsencrypt-data:/var/lib/letsencrypt

volumes:
  letsencrypt-config:
  letsencrypt-data: