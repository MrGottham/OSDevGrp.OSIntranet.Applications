@model ContactAccountViewModel;
<div class="row">
    <div class="col-12 col-sm-12 col-md-12 col-lg-12 col-xl-12">
        <form id="editAccountForm" asp-area="" asp-controller="Accounting" asp-action="@Model.GetAction()">
            <input type="hidden" asp-for="EditMode" />
            @if (Model.PaymentTerm != null && Model.PaymentTerm.IsKnownPaymentTerm(Model.PaymentTerms) && string.IsNullOrWhiteSpace(Model.PaymentTerm.Name) == false)
            {
                <input type="hidden" asp-for="PaymentTerm.Name" />
            }
            else
            {
                <input type="hidden" id="@Html.IdFor(m => m.PaymentTerm.Name)" name="@Html.NameFor(m => m.PaymentTerm.Name)" value="@Model.PaymentTerms.FirstOrDefault()?.Name" />
            }
            @if (Model.EditMode == EditMode.Edit && Model.ValuesAtStatusDate != null)
            {
                <input type="hidden" asp-for="ValuesAtStatusDate.Balance" />
            }
            @if (Model.EditMode == EditMode.Edit && Model.ValuesAtEndOfLastMonthFromStatusDate != null)
            {
                <input type="hidden" asp-for="ValuesAtEndOfLastMonthFromStatusDate.Balance" />
            }
            @if (Model.EditMode == EditMode.Edit && Model.ValuesAtEndOfLastYearFromStatusDate != null)
            {
                <input type="hidden" asp-for="ValuesAtEndOfLastYearFromStatusDate.Balance" />
            }
            <h3>@Model.Accounting.Name.ToHtmlString()</h3>
        <div id="contactAccountAccordion">
	        <div class="card">
		        <div class="card-header">
			        <a class="card-link" data-toggle="collapse" href="#collapseCoreData">
				        <h5>Stamdata</h5>
			        </a>
		        </div>
		        <div id="collapseCoreData" class="collapse show" data-parent="#contactAccountAccordion">
			        <div class="card-body">
				        @await Html.PartialAsync("_EditAccountIdentificationPartial", Model)
				        <div class="form-group">
					        <label asp-for="MailAddress"></label>
					        @if (Model.IsProtected == false)
					        {
						        <input asp-for="MailAddress" class="form-control" />
						        <span asp-validation-for="MailAddress" class="text-danger"></span>
					        }
					        else
					        {
						        <input asp-for="MailAddress" class="form-control" readonly />
					        }
				        </div>
				        <div class="form-group">
					        <label asp-for="PrimaryPhone"></label>
					        @if (Model.IsProtected == false)
					        {
						        <input asp-for="PrimaryPhone" class="form-control" />
						        <span asp-validation-for="PrimaryPhone" class="text-danger"></span>
					        }
					        else
					        {
						        <input asp-for="PrimaryPhone" class="form-control" readonly />
					        }
				        </div>
				        <div class="form-group">
					        <label asp-for="SecondaryPhone"></label>
					        @if (Model.IsProtected == false)
					        {
						        <input asp-for="SecondaryPhone" class="form-control" />
						        <span asp-validation-for="SecondaryPhone" class="text-danger"></span>
					        }
					        else
					        {
						        <input asp-for="SecondaryPhone" class="form-control" readonly />
					        }
				        </div>
				        @await Html.PartialAsync("_EditAccountCoreDataPartial", Model)
				        <div class="form-group">
					        <label asp-for="PaymentTerm"></label>
					        @if (Model.IsProtected == false)
					        {
						        <select asp-for="PaymentTerm.Number" asp-items="Model.PaymentTerms.SelectListFor(Model.PaymentTerm?.Number)" class="form-control" onchange="javascript:$().applyValue('#@Html.IdFor(m => m.PaymentTerm.Name)', $(this).find('option:selected').text());"></select>
						        <span asp-validation-for="PaymentTerm" class="text-danger"></span>
					        }
					        else
					        {
						        <input type="hidden" asp-for="PaymentTerm.Number" />
						        <select asp-items="Model.PaymentTerms.SelectListFor(Model.PaymentTerm?.Number)" class="form-control" readonly disabled></select>
					        }
				        </div>
			        </div>
		        </div>
	        </div>
	        @if (Model.EditMode == EditMode.Edit && (Model.ValuesAtStatusDate != null || Model.ValuesAtEndOfLastMonthFromStatusDate != null || Model.ValuesAtEndOfLastYearFromStatusDate != null))
	        {
		        <div class="card">
			        <div class="card-header d-none d-lg-block d-xl-block">
				        <a class="card-link" data-toggle="collapse" href="#collapseActualStatus">
					        <h5>Aktuel status</h5>
				        </a>
			        </div>
			        <div id="collapseActualStatus" class="collapse show" data-parent="#contactAccountAccordion">
				        <div class="card-body">
					        <div class="table-responsive">
						        <table class="table table-sm">
							        <thead>
							        <tr>
								        <th></th>
								        <th class="text-right">Saldo</th>
							        </tr>
							        </thead>
							        <tbody>
							        @if (Model.ValuesAtStatusDate != null)
							        {
								        <tr>
									        <td>@Html.LabelFor(m => m.ValuesAtStatusDate)</td>
									        <td class="text-right">@Model.ValuesAtStatusDate.Balance.AsCurrency()</td>
								        </tr>
							        }
							        @if (Model.ValuesAtEndOfLastMonthFromStatusDate != null)
							        {
								        <tr>
									        <td>@Html.LabelFor(m => m.ValuesAtEndOfLastMonthFromStatusDate)</td>
									        <td class="text-right">@Model.ValuesAtEndOfLastMonthFromStatusDate.Balance.AsCurrency()</td>
								        </tr>
							        }
							        @if (Model.ValuesAtEndOfLastYearFromStatusDate != null)
							        {
								        <tr>
									        <td>@Html.LabelFor(m => m.ValuesAtEndOfLastYearFromStatusDate)</td>
									        <td class="text-right">@Model.ValuesAtEndOfLastYearFromStatusDate.Balance.AsCurrency()</td>
								        </tr>
							        }
							        </tbody>
						        </table>
					        </div>
				        </div>
			        </div>
		        </div>
	        }
	        @if (Model.BalanceInfos != null)
	        {
		        @foreach (KeyValuePair<short, BalanceInfoCollectionViewModel> item in Model.BalanceInfos.Where(m => m.Value.Any(n => n.Editable == false || n.IsCurrentMonth)).OrderBy(m => m.Key))
		        {
			        <div class="card">
				        <div class="card-header">
					        <a class="card-link" data-toggle="collapse" href="@($"#collapseBalanceInfoCollectionFor{item.Key}")">
						        <h5>@Html.LabelFor(m => m.BalanceInfos)&nbsp;@Html.Raw(item.Key)</h5>
					        </a>
				        </div>
				        <div id="@($"collapseBalanceInfoCollectionFor{item.Key}")" class="collapse show" data-parent="#contactAccountAccordion">
					        <div class="card-body">
						        <div class="table-responsive">
							        <table class="table table-sm">
								        <thead>
								        <tr>
									        <th></th>
									        <th class="text-right">Saldo</th>
								        </tr>
								        </thead>
								        <tbody>
								        @for (int i = 0; i < item.Value.Count; i++)
								        {
									        int elementNo = i;
									        <input type="hidden" asp-for="BalanceInfos.Items[item.Key].Items[elementNo].Year" />
									        <input type="hidden" asp-for="BalanceInfos.Items[item.Key].Items[elementNo].Month" />
									        <input type="hidden" asp-for="BalanceInfos.Items[item.Key].Items[elementNo].Balance" />
									        @if (Model.BalanceInfos.Items[item.Key].Items[elementNo].Editable == false || Model.BalanceInfos.Items[item.Key].Items[elementNo].IsCurrentMonth)
									        {
										        <tr>
											        <td>@Html.DisplayFor(m => m.BalanceInfos.Items[item.Key].Items[elementNo].MonthAsText)</td>
											        <td>
												        <div class="form-group">
													        <input type="text" value="@Model.BalanceInfos.Items[item.Key].Items[elementNo].Balance.AsCurrency()" class="form-control text-right" readonly />
												        </div>
											        </td>
										        </tr>
									        }
								        }
								        </tbody>
							        </table>
						        </div>
					        </div>
				        </div>
			        </div>
		        }
	        }
	        @if (Model.EditMode == EditMode.Edit && Model.PostingLines != null)
	        {
		        <div class="card">
			        <div class="card-header">
				        <a class="card-link" data-toggle="collapse" href="#collapsePostingLineCollection">
					        <h5>@Html.LabelFor(m => m.PostingLines)</h5>
				        </a>
			        </div>
			        <div id="collapsePostingLineCollection" class="collapse show" data-parent="#contactAccountAccordion">
				        <div class="card-body">
					        @await Html.PartialAsync("_PostingLineCollectionPartial", Model.PostingLines)
				        </div>
			        </div>
		        </div>
	        }
	        @if (Model.EditMode == EditMode.Edit)
	        {
		        <div class="card">
			        <div class="card-header">
				        <a class="card-link" data-toggle="collapse" href="#collapseAuditable">
					        <h5>Revisionsoplysninger</h5>
				        </a>
			        </div>
			        <div id="collapseAuditable" class="collapse show" data-parent="#contactAccountAccordion">
				        <div class="card-body">
					        @await Html.PartialAsync("_AuditablePartial", Model)
				        </div>
			        </div>
		        </div>
	        }
        </div>
        @await Html.PartialAsync("_EditAccountIdentificationOptionsPartial", Model)
        </form>
    </div>
</div>