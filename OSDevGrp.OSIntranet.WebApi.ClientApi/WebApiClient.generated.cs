//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace OSDevGrp.OSIntranet.WebApi.ClientApi
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IWebApiClient
    {
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccountingModel>> AccountingsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccountingModel>> AccountingsAsync(System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccountingModel>> AccountingAllAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccountingModel>> AccountingAllAsync(System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountingModel> AccountingAsync(int accountingNumber, DateTimeOffset? statusDate);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountingModel> AccountingAsync(int accountingNumber, DateTimeOffset? statusDate, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccountModel>> AccountsAllAsync(int accountingNumber, DateTimeOffset? statusDate);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccountModel>> AccountsAllAsync(int accountingNumber, DateTimeOffset? statusDate, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountModel> AccountsAsync(int accountingNumber, string accountNumber, DateTimeOffset? statusDate);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountModel> AccountsAsync(int accountingNumber, string accountNumber, DateTimeOffset? statusDate, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BudgetAccountModel>> BudgetaccountsAllAsync(int accountingNumber, DateTimeOffset? statusDate);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BudgetAccountModel>> BudgetaccountsAllAsync(int accountingNumber, DateTimeOffset? statusDate, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BudgetAccountModel> BudgetaccountsAsync(int accountingNumber, string accountNumber, DateTimeOffset? statusDate);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BudgetAccountModel> BudgetaccountsAsync(int accountingNumber, string accountNumber, DateTimeOffset? statusDate, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContactAccountModel>> ContactaccountsAllAsync(int accountingNumber, DateTimeOffset? statusDate);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContactAccountModel>> ContactaccountsAllAsync(int accountingNumber, DateTimeOffset? statusDate, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContactAccountModel>> DebtorsAllAsync(int accountingNumber, DateTimeOffset? statusDate);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContactAccountModel>> DebtorsAllAsync(int accountingNumber, DateTimeOffset? statusDate, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContactAccountModel>> CreditorsAllAsync(int accountingNumber, DateTimeOffset? statusDate);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContactAccountModel>> CreditorsAllAsync(int accountingNumber, DateTimeOffset? statusDate, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContactAccountModel> ContactaccountsAsync(int accountingNumber, string accountNumber, DateTimeOffset? statusDate);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContactAccountModel> ContactaccountsAsync(int accountingNumber, string accountNumber, DateTimeOffset? statusDate, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContactAccountModel> DebtorsAsync(int accountingNumber, string accountNumber, DateTimeOffset? statusDate);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContactAccountModel> DebtorsAsync(int accountingNumber, string accountNumber, DateTimeOffset? statusDate, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContactAccountModel> CreditorsAsync(int accountingNumber, string accountNumber, DateTimeOffset? statusDate);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContactAccountModel> CreditorsAsync(int accountingNumber, string accountNumber, DateTimeOffset? statusDate, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PostingLineModel>> PostinglinesAllAsync(int accountingNumber, DateTimeOffset? statusDate, int? numberOfPostingLines);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PostingLineModel>> PostinglinesAllAsync(int accountingNumber, DateTimeOffset? statusDate, int? numberOfPostingLines, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApplyPostingJournalResultModel> PostinglinesAsync(int accountingNumber, System.Collections.Generic.IEnumerable<ApplyPostingLineModel>? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApplyPostingJournalResultModel> PostinglinesAsync(int accountingNumber, System.Collections.Generic.IEnumerable<ApplyPostingLineModel>? body, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApplyPostingJournalResultModel> Postinglines2Async(ApplyPostingJournalModel? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApplyPostingJournalResultModel> Postinglines2Async(ApplyPostingJournalModel? body, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccountGroupModel>> AccountgroupsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccountGroupModel>> AccountgroupsAsync(System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BudgetAccountGroupModel>> BudgetaccountgroupsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BudgetAccountGroupModel>> BudgetaccountgroupsAsync(System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PaymentTermModel>> PaymenttermsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PaymentTermModel>> PaymenttermsAsync(System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<LetterHeadModel>> LetterheadsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<LetterHeadModel>> LetterheadsAsync(System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccessTokenModel> TokenAsync(string? grant_type, string? code, string? client_id, string? client_secret, string? redirect_uri);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccessTokenModel> TokenAsync(string? grant_type, string? code, string? client_id, string? client_secret, string? redirect_uri, System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> UserinfoAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> UserinfoAsync(System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JsonWebKeySetModel> JwksAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JsonWebKeySetModel> JwksAsync(System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OpenIdProviderConfigurationModel> OpenidConfigurationAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OpenIdProviderConfigurationModel> OpenidConfigurationAsync(System.Threading.CancellationToken cancellationToken);

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> AcmeChallengeAsync(string challengeToken);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> AcmeChallengeAsync(string challengeToken, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal partial class WebApiClient : IWebApiClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public WebApiClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccountingModel>> AccountingsAsync()
        {
            return AccountingsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccountingModel>> AccountingsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/Accounting/accountings"
                    urlBuilder_.Append("api/Accounting/accountings");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AccountingModel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccountingModel>> AccountingAllAsync()
        {
            return AccountingAllAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccountingModel>> AccountingAllAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/Accounting"
                    urlBuilder_.Append("api/Accounting");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AccountingModel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccountingModel> AccountingAsync(int accountingNumber, DateTimeOffset? statusDate)
        {
            return AccountingAsync(accountingNumber, statusDate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccountingModel> AccountingAsync(int accountingNumber, DateTimeOffset? statusDate, System.Threading.CancellationToken cancellationToken)
        {
            if (accountingNumber == null)
                throw new System.ArgumentNullException("accountingNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/Accounting/{accountingNumber}"
                    urlBuilder_.Append("api/Accounting/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountingNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (statusDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("statusDate")).Append('=').Append(System.Uri.EscapeDataString(statusDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccountingModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccountModel>> AccountsAllAsync(int accountingNumber, DateTimeOffset? statusDate)
        {
            return AccountsAllAsync(accountingNumber, statusDate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccountModel>> AccountsAllAsync(int accountingNumber, DateTimeOffset? statusDate, System.Threading.CancellationToken cancellationToken)
        {
            if (accountingNumber == null)
                throw new System.ArgumentNullException("accountingNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/Accounting/{accountingNumber}/accounts"
                    urlBuilder_.Append("api/Accounting/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountingNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounts");
                    urlBuilder_.Append('?');
                    if (statusDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("statusDate")).Append('=').Append(System.Uri.EscapeDataString(statusDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AccountModel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccountModel> AccountsAsync(int accountingNumber, string accountNumber, DateTimeOffset? statusDate)
        {
            return AccountsAsync(accountingNumber, accountNumber, statusDate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccountModel> AccountsAsync(int accountingNumber, string accountNumber, DateTimeOffset? statusDate, System.Threading.CancellationToken cancellationToken)
        {
            if (accountingNumber == null)
                throw new System.ArgumentNullException("accountingNumber");

            if (accountNumber == null)
                throw new System.ArgumentNullException("accountNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/Accounting/{accountingNumber}/accounts/{accountNumber}"
                    urlBuilder_.Append("api/Accounting/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountingNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (statusDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("statusDate")).Append('=').Append(System.Uri.EscapeDataString(statusDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccountModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BudgetAccountModel>> BudgetaccountsAllAsync(int accountingNumber, DateTimeOffset? statusDate)
        {
            return BudgetaccountsAllAsync(accountingNumber, statusDate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BudgetAccountModel>> BudgetaccountsAllAsync(int accountingNumber, DateTimeOffset? statusDate, System.Threading.CancellationToken cancellationToken)
        {
            if (accountingNumber == null)
                throw new System.ArgumentNullException("accountingNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/Accounting/{accountingNumber}/budgetaccounts"
                    urlBuilder_.Append("api/Accounting/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountingNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/budgetaccounts");
                    urlBuilder_.Append('?');
                    if (statusDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("statusDate")).Append('=').Append(System.Uri.EscapeDataString(statusDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<BudgetAccountModel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BudgetAccountModel> BudgetaccountsAsync(int accountingNumber, string accountNumber, DateTimeOffset? statusDate)
        {
            return BudgetaccountsAsync(accountingNumber, accountNumber, statusDate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BudgetAccountModel> BudgetaccountsAsync(int accountingNumber, string accountNumber, DateTimeOffset? statusDate, System.Threading.CancellationToken cancellationToken)
        {
            if (accountingNumber == null)
                throw new System.ArgumentNullException("accountingNumber");

            if (accountNumber == null)
                throw new System.ArgumentNullException("accountNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/Accounting/{accountingNumber}/budgetaccounts/{accountNumber}"
                    urlBuilder_.Append("api/Accounting/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountingNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/budgetaccounts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (statusDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("statusDate")).Append('=').Append(System.Uri.EscapeDataString(statusDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BudgetAccountModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContactAccountModel>> ContactaccountsAllAsync(int accountingNumber, DateTimeOffset? statusDate)
        {
            return ContactaccountsAllAsync(accountingNumber, statusDate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContactAccountModel>> ContactaccountsAllAsync(int accountingNumber, DateTimeOffset? statusDate, System.Threading.CancellationToken cancellationToken)
        {
            if (accountingNumber == null)
                throw new System.ArgumentNullException("accountingNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/Accounting/{accountingNumber}/contactaccounts"
                    urlBuilder_.Append("api/Accounting/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountingNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contactaccounts");
                    urlBuilder_.Append('?');
                    if (statusDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("statusDate")).Append('=').Append(System.Uri.EscapeDataString(statusDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ContactAccountModel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContactAccountModel>> DebtorsAllAsync(int accountingNumber, DateTimeOffset? statusDate)
        {
            return DebtorsAllAsync(accountingNumber, statusDate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContactAccountModel>> DebtorsAllAsync(int accountingNumber, DateTimeOffset? statusDate, System.Threading.CancellationToken cancellationToken)
        {
            if (accountingNumber == null)
                throw new System.ArgumentNullException("accountingNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/Accounting/{accountingNumber}/debtors"
                    urlBuilder_.Append("api/Accounting/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountingNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/debtors");
                    urlBuilder_.Append('?');
                    if (statusDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("statusDate")).Append('=').Append(System.Uri.EscapeDataString(statusDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ContactAccountModel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContactAccountModel>> CreditorsAllAsync(int accountingNumber, DateTimeOffset? statusDate)
        {
            return CreditorsAllAsync(accountingNumber, statusDate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContactAccountModel>> CreditorsAllAsync(int accountingNumber, DateTimeOffset? statusDate, System.Threading.CancellationToken cancellationToken)
        {
            if (accountingNumber == null)
                throw new System.ArgumentNullException("accountingNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/Accounting/{accountingNumber}/creditors"
                    urlBuilder_.Append("api/Accounting/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountingNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/creditors");
                    urlBuilder_.Append('?');
                    if (statusDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("statusDate")).Append('=').Append(System.Uri.EscapeDataString(statusDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ContactAccountModel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ContactAccountModel> ContactaccountsAsync(int accountingNumber, string accountNumber, DateTimeOffset? statusDate)
        {
            return ContactaccountsAsync(accountingNumber, accountNumber, statusDate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ContactAccountModel> ContactaccountsAsync(int accountingNumber, string accountNumber, DateTimeOffset? statusDate, System.Threading.CancellationToken cancellationToken)
        {
            if (accountingNumber == null)
                throw new System.ArgumentNullException("accountingNumber");

            if (accountNumber == null)
                throw new System.ArgumentNullException("accountNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/Accounting/{accountingNumber}/contactaccounts/{accountNumber}"
                    urlBuilder_.Append("api/Accounting/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountingNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contactaccounts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (statusDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("statusDate")).Append('=').Append(System.Uri.EscapeDataString(statusDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContactAccountModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ContactAccountModel> DebtorsAsync(int accountingNumber, string accountNumber, DateTimeOffset? statusDate)
        {
            return DebtorsAsync(accountingNumber, accountNumber, statusDate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ContactAccountModel> DebtorsAsync(int accountingNumber, string accountNumber, DateTimeOffset? statusDate, System.Threading.CancellationToken cancellationToken)
        {
            if (accountingNumber == null)
                throw new System.ArgumentNullException("accountingNumber");

            if (accountNumber == null)
                throw new System.ArgumentNullException("accountNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/Accounting/{accountingNumber}/debtors/{accountNumber}"
                    urlBuilder_.Append("api/Accounting/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountingNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/debtors/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (statusDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("statusDate")).Append('=').Append(System.Uri.EscapeDataString(statusDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContactAccountModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ContactAccountModel> CreditorsAsync(int accountingNumber, string accountNumber, DateTimeOffset? statusDate)
        {
            return CreditorsAsync(accountingNumber, accountNumber, statusDate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ContactAccountModel> CreditorsAsync(int accountingNumber, string accountNumber, DateTimeOffset? statusDate, System.Threading.CancellationToken cancellationToken)
        {
            if (accountingNumber == null)
                throw new System.ArgumentNullException("accountingNumber");

            if (accountNumber == null)
                throw new System.ArgumentNullException("accountNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/Accounting/{accountingNumber}/creditors/{accountNumber}"
                    urlBuilder_.Append("api/Accounting/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountingNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/creditors/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    if (statusDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("statusDate")).Append('=').Append(System.Uri.EscapeDataString(statusDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContactAccountModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PostingLineModel>> PostinglinesAllAsync(int accountingNumber, DateTimeOffset? statusDate, int? numberOfPostingLines)
        {
            return PostinglinesAllAsync(accountingNumber, statusDate, numberOfPostingLines, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PostingLineModel>> PostinglinesAllAsync(int accountingNumber, DateTimeOffset? statusDate, int? numberOfPostingLines, System.Threading.CancellationToken cancellationToken)
        {
            if (accountingNumber == null)
                throw new System.ArgumentNullException("accountingNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/Accounting/{accountingNumber}/postinglines"
                    urlBuilder_.Append("api/Accounting/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountingNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/postinglines");
                    urlBuilder_.Append('?');
                    if (statusDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("statusDate")).Append('=').Append(System.Uri.EscapeDataString(statusDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (numberOfPostingLines != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("numberOfPostingLines")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(numberOfPostingLines, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PostingLineModel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApplyPostingJournalResultModel> PostinglinesAsync(int accountingNumber, System.Collections.Generic.IEnumerable<ApplyPostingLineModel>? body)
        {
            return PostinglinesAsync(accountingNumber, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApplyPostingJournalResultModel> PostinglinesAsync(int accountingNumber, System.Collections.Generic.IEnumerable<ApplyPostingLineModel>? body, System.Threading.CancellationToken cancellationToken)
        {
            if (accountingNumber == null)
                throw new System.ArgumentNullException("accountingNumber");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/Accounting/{accountingNumber}/postinglines"
                    urlBuilder_.Append("api/Accounting/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountingNumber, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/postinglines");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApplyPostingJournalResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApplyPostingJournalResultModel> Postinglines2Async(ApplyPostingJournalModel? body)
        {
            return Postinglines2Async(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApplyPostingJournalResultModel> Postinglines2Async(ApplyPostingJournalModel? body, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/Accounting/postinglines"
                    urlBuilder_.Append("api/Accounting/postinglines");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApplyPostingJournalResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccountGroupModel>> AccountgroupsAsync()
        {
            return AccountgroupsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccountGroupModel>> AccountgroupsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/Accounting/accountgroups"
                    urlBuilder_.Append("api/Accounting/accountgroups");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AccountGroupModel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BudgetAccountGroupModel>> BudgetaccountgroupsAsync()
        {
            return BudgetaccountgroupsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BudgetAccountGroupModel>> BudgetaccountgroupsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/Accounting/budgetaccountgroups"
                    urlBuilder_.Append("api/Accounting/budgetaccountgroups");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<BudgetAccountGroupModel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PaymentTermModel>> PaymenttermsAsync()
        {
            return PaymenttermsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PaymentTermModel>> PaymenttermsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/Accounting/paymentterms"
                    urlBuilder_.Append("api/Accounting/paymentterms");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PaymentTermModel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<LetterHeadModel>> LetterheadsAsync()
        {
            return LetterheadsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<LetterHeadModel>> LetterheadsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/Common/letterheads"
                    urlBuilder_.Append("api/Common/letterheads");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<LetterHeadModel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccessTokenModel> TokenAsync(string? grant_type, string? code, string? client_id, string? client_secret, string? redirect_uri)
        {
            return TokenAsync(grant_type, code, client_id, client_secret, redirect_uri, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccessTokenModel> TokenAsync(string? grant_type, string? code, string? client_id, string? client_secret, string? redirect_uri, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (grant_type == null)
                        throw new System.ArgumentNullException("grant_type");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(grant_type, System.Globalization.CultureInfo.InvariantCulture)), "grant_type");
                    }

                    if (code == null)
                        throw new System.ArgumentNullException("code");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture)), "code");
                    }

                    if (client_id == null)
                        throw new System.ArgumentNullException("client_id");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(client_id, System.Globalization.CultureInfo.InvariantCulture)), "client_id");
                    }

                    if (client_secret == null)
                        throw new System.ArgumentNullException("client_secret");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(client_secret, System.Globalization.CultureInfo.InvariantCulture)), "client_secret");
                    }

                    if (redirect_uri == null)
                        throw new System.ArgumentNullException("redirect_uri");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(redirect_uri, System.Globalization.CultureInfo.InvariantCulture)), "redirect_uri");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/oauth/token"
                    urlBuilder_.Append("api/oauth/token");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccessTokenModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorResponseModel>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorResponseModel>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorResponseModel>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> UserinfoAsync()
        {
            return UserinfoAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> UserinfoAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/jwt"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/oauth/userinfo"
                    urlBuilder_.Append("api/oauth/userinfo");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Unauthorized", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("Forbidden", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<JsonWebKeySetModel> JwksAsync()
        {
            return JwksAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<JsonWebKeySetModel> JwksAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/oauth/jwks"
                    urlBuilder_.Append("api/oauth/jwks");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JsonWebKeySetModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<OpenIdProviderConfigurationModel> OpenidConfigurationAsync()
        {
            return OpenidConfigurationAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OpenIdProviderConfigurationModel> OpenidConfigurationAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: ".well-known/openid-configuration"
                    urlBuilder_.Append(".well-known/openid-configuration");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OpenIdProviderConfigurationModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> AcmeChallengeAsync(string challengeToken)
        {
            return AcmeChallengeAsync(challengeToken, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="WebApiClientException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> AcmeChallengeAsync(string challengeToken, System.Threading.CancellationToken cancellationToken)
        {
            if (challengeToken == null)
                throw new System.ArgumentNullException("challengeToken");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: ".well-known/acme-challenge/{challengeToken}"
                    urlBuilder_.Append(".well-known/acme-challenge/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(challengeToken, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiClientException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new WebApiClientException<ErrorModel>("Internal Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiClientException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new WebApiClientException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new WebApiClientException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccessTokenModel
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public AccessTokenModel(string @access_token, int @expires_in, string? @id_token, string @token_type)

        {

            this.Token_type = @token_type;

            this.Access_token = @access_token;

            this.Id_token = @id_token;

            this.Expires_in = @expires_in;

        }
        [System.Text.Json.Serialization.JsonPropertyName("token_type")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Token_type { get; }

        [System.Text.Json.Serialization.JsonPropertyName("access_token")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Access_token { get; }

        [System.Text.Json.Serialization.JsonPropertyName("id_token")]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string? Id_token { get; }

        [System.Text.Json.Serialization.JsonPropertyName("expires_in")]
        [System.ComponentModel.DataAnnotations.Range(1, 3600)]
        public int Expires_in { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountGroupModel
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public AccountGroupModel(AccountGroupType @accountGroupType, string @name, int @number)

        {

            this.Number = @number;

            this.Name = @name;

            this.AccountGroupType = @accountGroupType;

        }
        [System.Text.Json.Serialization.JsonPropertyName("number")]
        [System.ComponentModel.DataAnnotations.Range(1, 99)]
        public int Number { get; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string Name { get; }

        [System.Text.Json.Serialization.JsonPropertyName("accountGroupType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AccountGroupType AccountGroupType { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AccountGroupType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Assets")]
        Assets = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Liabilities")]
        Liabilities = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountIdentificationModel
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public AccountIdentificationModel(AccountingIdentificationModel @accounting, string @accountName, string @accountNumber)

        {

            this.Accounting = @accounting;

            this.AccountNumber = @accountNumber;

            this.AccountName = @accountName;

        }
        [System.Text.Json.Serialization.JsonPropertyName("accounting")]
        [System.ComponentModel.DataAnnotations.Required]
        public AccountingIdentificationModel Accounting { get; }

        [System.Text.Json.Serialization.JsonPropertyName("accountNumber")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9A-Z\-+]{1,16}")]
        public string AccountNumber { get; }

        [System.Text.Json.Serialization.JsonPropertyName("accountName")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string AccountName { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountModel
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public AccountModel(AccountGroupModel @accountGroup, AccountingIdentificationModel @accounting, string @accountName, string @accountNumber, System.Collections.Generic.ICollection<CreditInfoModel> @creditInfos, string? @description, string? @note, DateTimeOffset @statusDate, CreditInfoValuesModel @valuesAtEndOfLastMonthFromStatusDate, CreditInfoValuesModel @valuesAtEndOfLastYearFromStatusDate, CreditInfoValuesModel @valuesAtStatusDate)

        {

            this.Accounting = @accounting;

            this.AccountNumber = @accountNumber;

            this.AccountName = @accountName;

            this.Description = @description;

            this.Note = @note;

            this.StatusDate = @statusDate;

            this.AccountGroup = @accountGroup;

            this.ValuesAtStatusDate = @valuesAtStatusDate;

            this.ValuesAtEndOfLastMonthFromStatusDate = @valuesAtEndOfLastMonthFromStatusDate;

            this.ValuesAtEndOfLastYearFromStatusDate = @valuesAtEndOfLastYearFromStatusDate;

            this.CreditInfos = @creditInfos;

        }
        [System.Text.Json.Serialization.JsonPropertyName("accounting")]
        [System.ComponentModel.DataAnnotations.Required]
        public AccountingIdentificationModel Accounting { get; }

        [System.Text.Json.Serialization.JsonPropertyName("accountNumber")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9A-Z\-+]{1,16}")]
        public string AccountNumber { get; }

        [System.Text.Json.Serialization.JsonPropertyName("accountName")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string AccountName { get; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength = 1)]
        public string? Description { get; }

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        [System.ComponentModel.DataAnnotations.StringLength(4096, MinimumLength = 1)]
        public string? Note { get; }

        [System.Text.Json.Serialization.JsonPropertyName("statusDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public DateTimeOffset StatusDate { get; }

        [System.Text.Json.Serialization.JsonPropertyName("accountGroup")]
        [System.ComponentModel.DataAnnotations.Required]
        public AccountGroupModel AccountGroup { get; }

        [System.Text.Json.Serialization.JsonPropertyName("valuesAtStatusDate")]
        [System.ComponentModel.DataAnnotations.Required]
        public CreditInfoValuesModel ValuesAtStatusDate { get; }

        [System.Text.Json.Serialization.JsonPropertyName("valuesAtEndOfLastMonthFromStatusDate")]
        [System.ComponentModel.DataAnnotations.Required]
        public CreditInfoValuesModel ValuesAtEndOfLastMonthFromStatusDate { get; }

        [System.Text.Json.Serialization.JsonPropertyName("valuesAtEndOfLastYearFromStatusDate")]
        [System.ComponentModel.DataAnnotations.Required]
        public CreditInfoValuesModel ValuesAtEndOfLastYearFromStatusDate { get; }

        [System.Text.Json.Serialization.JsonPropertyName("creditInfos")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CreditInfoModel> CreditInfos { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountingIdentificationModel
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public AccountingIdentificationModel(string @name, int @number)

        {

            this.Number = @number;

            this.Name = @name;

        }
        [System.Text.Json.Serialization.JsonPropertyName("number")]
        [System.ComponentModel.DataAnnotations.Range(1, 99)]
        public int Number { get; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string Name { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountingModel
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public AccountingModel(System.Collections.Generic.ICollection<AccountModel> @accounts, int @backDating, BalanceBelowZeroType @balanceBelowZero, System.Collections.Generic.ICollection<BudgetAccountModel> @budgetAccounts, System.Collections.Generic.ICollection<ContactAccountModel> @contactAccounts, LetterHeadIdentificationModel @letterHead, string @name, int @number, DateTimeOffset @statusDate)

        {

            this.Number = @number;

            this.Name = @name;

            this.LetterHead = @letterHead;

            this.BalanceBelowZero = @balanceBelowZero;

            this.BackDating = @backDating;

            this.StatusDate = @statusDate;

            this.Accounts = @accounts;

            this.BudgetAccounts = @budgetAccounts;

            this.ContactAccounts = @contactAccounts;

        }
        [System.Text.Json.Serialization.JsonPropertyName("number")]
        [System.ComponentModel.DataAnnotations.Range(1, 99)]
        public int Number { get; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string Name { get; }

        [System.Text.Json.Serialization.JsonPropertyName("letterHead")]
        [System.ComponentModel.DataAnnotations.Required]
        public LetterHeadIdentificationModel LetterHead { get; }

        [System.Text.Json.Serialization.JsonPropertyName("balanceBelowZero")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public BalanceBelowZeroType BalanceBelowZero { get; }

        [System.Text.Json.Serialization.JsonPropertyName("backDating")]
        [System.ComponentModel.DataAnnotations.Range(0, 365)]
        public int BackDating { get; }

        [System.Text.Json.Serialization.JsonPropertyName("statusDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public DateTimeOffset StatusDate { get; }

        [System.Text.Json.Serialization.JsonPropertyName("accounts")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AccountModel> Accounts { get; }

        [System.Text.Json.Serialization.JsonPropertyName("budgetAccounts")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<BudgetAccountModel> BudgetAccounts { get; }

        [System.Text.Json.Serialization.JsonPropertyName("contactAccounts")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ContactAccountModel> ContactAccounts { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplyPostingJournalModel
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ApplyPostingJournalModel(int @accountingNumber, System.Collections.Generic.ICollection<ApplyPostingLineModel> @applyPostingLines)

        {

            this.AccountingNumber = @accountingNumber;

            this.ApplyPostingLines = @applyPostingLines;

        }
        [System.Text.Json.Serialization.JsonPropertyName("accountingNumber")]
        [System.ComponentModel.DataAnnotations.Range(1, 99)]
        public int AccountingNumber { get; }

        [System.Text.Json.Serialization.JsonPropertyName("applyPostingLines")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ApplyPostingLineModel> ApplyPostingLines { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplyPostingJournalResultModel
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ApplyPostingJournalResultModel(System.Collections.Generic.ICollection<PostingLineModel> @postingLines, System.Collections.Generic.ICollection<PostingWarningModel> @postingWarnings)

        {

            this.PostingLines = @postingLines;

            this.PostingWarnings = @postingWarnings;

        }
        [System.Text.Json.Serialization.JsonPropertyName("postingLines")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<PostingLineModel> PostingLines { get; }

        [System.Text.Json.Serialization.JsonPropertyName("postingWarnings")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<PostingWarningModel> PostingWarnings { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplyPostingLineModel
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ApplyPostingLineModel(string @accountNumber, string? @budgetAccountNumber, string? @contactAccountNumber, double? @credit, double? @debit, string @details, System.Guid? @identifier, DateTimeOffset @postingDate, string? @reference, int? @sortOrder)

        {

            this.Identifier = @identifier;

            this.PostingDate = @postingDate;

            this.Reference = @reference;

            this.AccountNumber = @accountNumber;

            this.Details = @details;

            this.BudgetAccountNumber = @budgetAccountNumber;

            this.Debit = @debit;

            this.Credit = @credit;

            this.ContactAccountNumber = @contactAccountNumber;

            this.SortOrder = @sortOrder;

        }
        [System.Text.Json.Serialization.JsonPropertyName("identifier")]
        public System.Guid? Identifier { get; }

        [System.Text.Json.Serialization.JsonPropertyName("postingDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public DateTimeOffset PostingDate { get; }

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string? Reference { get; }

        [System.Text.Json.Serialization.JsonPropertyName("accountNumber")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9A-Z\-+]{1,16}")]
        public string AccountNumber { get; }

        [System.Text.Json.Serialization.JsonPropertyName("details")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string Details { get; }

        [System.Text.Json.Serialization.JsonPropertyName("budgetAccountNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9A-Z\-+]{1,16}")]
        public string? BudgetAccountNumber { get; }

        [System.Text.Json.Serialization.JsonPropertyName("debit")]
        [System.ComponentModel.DataAnnotations.Range(0D, 99999999D)]
        public double? Debit { get; }

        [System.Text.Json.Serialization.JsonPropertyName("credit")]
        [System.ComponentModel.DataAnnotations.Range(0D, 99999999D)]
        public double? Credit { get; }

        [System.Text.Json.Serialization.JsonPropertyName("contactAccountNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9A-Z\-+]{1,16}")]
        public string? ContactAccountNumber { get; }

        [System.Text.Json.Serialization.JsonPropertyName("sortOrder")]
        [System.ComponentModel.DataAnnotations.Range(0, 9999999)]
        public int? SortOrder { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BalanceBelowZeroType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Debtors")]
        Debtors = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Creditors")]
        Creditors = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BalanceInfoModel
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public BalanceInfoModel(double @balance, int @month, int @year)

        {

            this.Year = @year;

            this.Month = @month;

            this.Balance = @balance;

        }
        [System.Text.Json.Serialization.JsonPropertyName("year")]
        [System.ComponentModel.DataAnnotations.Range(1950, 2199)]
        public int Year { get; }

        [System.Text.Json.Serialization.JsonPropertyName("month")]
        [System.ComponentModel.DataAnnotations.Range(1, 12)]
        public int Month { get; }

        [System.Text.Json.Serialization.JsonPropertyName("balance")]
        public double Balance { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BalanceInfoValuesModel
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public BalanceInfoValuesModel(double @balance)

        {

            this.Balance = @balance;

        }
        [System.Text.Json.Serialization.JsonPropertyName("balance")]
        public double Balance { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BudgetAccountGroupModel
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public BudgetAccountGroupModel(string @name, int @number)

        {

            this.Number = @number;

            this.Name = @name;

        }
        [System.Text.Json.Serialization.JsonPropertyName("number")]
        [System.ComponentModel.DataAnnotations.Range(1, 99)]
        public int Number { get; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string Name { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BudgetAccountModel
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public BudgetAccountModel(AccountingIdentificationModel @accounting, string @accountName, string @accountNumber, BudgetAccountGroupModel @budgetAccountGroup, System.Collections.Generic.ICollection<BudgetInfoModel> @budgetInfos, string? @description, string? @note, DateTimeOffset @statusDate, BudgetInfoValuesModel @valuesForLastMonthOfStatusDate, BudgetInfoValuesModel @valuesForLastYearOfStatusDate, BudgetInfoValuesModel @valuesForMonthOfStatusDate, BudgetInfoValuesModel @valuesForYearToDateOfStatusDate)

        {

            this.Accounting = @accounting;

            this.AccountNumber = @accountNumber;

            this.AccountName = @accountName;

            this.Description = @description;

            this.Note = @note;

            this.StatusDate = @statusDate;

            this.BudgetAccountGroup = @budgetAccountGroup;

            this.ValuesForMonthOfStatusDate = @valuesForMonthOfStatusDate;

            this.ValuesForLastMonthOfStatusDate = @valuesForLastMonthOfStatusDate;

            this.ValuesForYearToDateOfStatusDate = @valuesForYearToDateOfStatusDate;

            this.ValuesForLastYearOfStatusDate = @valuesForLastYearOfStatusDate;

            this.BudgetInfos = @budgetInfos;

        }
        [System.Text.Json.Serialization.JsonPropertyName("accounting")]
        [System.ComponentModel.DataAnnotations.Required]
        public AccountingIdentificationModel Accounting { get; }

        [System.Text.Json.Serialization.JsonPropertyName("accountNumber")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9A-Z\-+]{1,16}")]
        public string AccountNumber { get; }

        [System.Text.Json.Serialization.JsonPropertyName("accountName")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string AccountName { get; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength = 1)]
        public string? Description { get; }

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        [System.ComponentModel.DataAnnotations.StringLength(4096, MinimumLength = 1)]
        public string? Note { get; }

        [System.Text.Json.Serialization.JsonPropertyName("statusDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public DateTimeOffset StatusDate { get; }

        [System.Text.Json.Serialization.JsonPropertyName("budgetAccountGroup")]
        [System.ComponentModel.DataAnnotations.Required]
        public BudgetAccountGroupModel BudgetAccountGroup { get; }

        [System.Text.Json.Serialization.JsonPropertyName("valuesForMonthOfStatusDate")]
        [System.ComponentModel.DataAnnotations.Required]
        public BudgetInfoValuesModel ValuesForMonthOfStatusDate { get; }

        [System.Text.Json.Serialization.JsonPropertyName("valuesForLastMonthOfStatusDate")]
        [System.ComponentModel.DataAnnotations.Required]
        public BudgetInfoValuesModel ValuesForLastMonthOfStatusDate { get; }

        [System.Text.Json.Serialization.JsonPropertyName("valuesForYearToDateOfStatusDate")]
        [System.ComponentModel.DataAnnotations.Required]
        public BudgetInfoValuesModel ValuesForYearToDateOfStatusDate { get; }

        [System.Text.Json.Serialization.JsonPropertyName("valuesForLastYearOfStatusDate")]
        [System.ComponentModel.DataAnnotations.Required]
        public BudgetInfoValuesModel ValuesForLastYearOfStatusDate { get; }

        [System.Text.Json.Serialization.JsonPropertyName("budgetInfos")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<BudgetInfoModel> BudgetInfos { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BudgetInfoModel
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public BudgetInfoModel(double @available, double @budget, double @expenses, double @income, int @month, double @posted, int @year)

        {

            this.Year = @year;

            this.Month = @month;

            this.Income = @income;

            this.Expenses = @expenses;

            this.Budget = @budget;

            this.Posted = @posted;

            this.Available = @available;

        }
        [System.Text.Json.Serialization.JsonPropertyName("year")]
        [System.ComponentModel.DataAnnotations.Range(1950, 2199)]
        public int Year { get; }

        [System.Text.Json.Serialization.JsonPropertyName("month")]
        [System.ComponentModel.DataAnnotations.Range(1, 12)]
        public int Month { get; }

        [System.Text.Json.Serialization.JsonPropertyName("income")]
        [System.ComponentModel.DataAnnotations.Range(0D, 99999999D)]
        public double Income { get; }

        [System.Text.Json.Serialization.JsonPropertyName("expenses")]
        [System.ComponentModel.DataAnnotations.Range(0D, 99999999D)]
        public double Expenses { get; }

        [System.Text.Json.Serialization.JsonPropertyName("budget")]
        public double Budget { get; }

        [System.Text.Json.Serialization.JsonPropertyName("posted")]
        public double Posted { get; }

        [System.Text.Json.Serialization.JsonPropertyName("available")]
        public double Available { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BudgetInfoValuesModel
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public BudgetInfoValuesModel(double @available, double @budget, double @posted)

        {

            this.Budget = @budget;

            this.Posted = @posted;

            this.Available = @available;

        }
        [System.Text.Json.Serialization.JsonPropertyName("budget")]
        public double Budget { get; }

        [System.Text.Json.Serialization.JsonPropertyName("posted")]
        public double Posted { get; }

        [System.Text.Json.Serialization.JsonPropertyName("available")]
        public double Available { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactAccountModel
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ContactAccountModel(AccountingIdentificationModel @accounting, string @accountName, string @accountNumber, System.Collections.Generic.ICollection<BalanceInfoModel> @balanceInfos, string? @description, string? @mailAddress, string? @note, PaymentTermModel @paymentTerm, string? @primaryPhone, string? @secondaryPhone, DateTimeOffset @statusDate, BalanceInfoValuesModel @valuesAtEndOfLastMonthFromStatusDate, BalanceInfoValuesModel @valuesAtEndOfLastYearFromStatusDate, BalanceInfoValuesModel @valuesAtStatusDate)

        {

            this.Accounting = @accounting;

            this.AccountNumber = @accountNumber;

            this.AccountName = @accountName;

            this.Description = @description;

            this.Note = @note;

            this.StatusDate = @statusDate;

            this.MailAddress = @mailAddress;

            this.PrimaryPhone = @primaryPhone;

            this.SecondaryPhone = @secondaryPhone;

            this.PaymentTerm = @paymentTerm;

            this.ValuesAtStatusDate = @valuesAtStatusDate;

            this.ValuesAtEndOfLastMonthFromStatusDate = @valuesAtEndOfLastMonthFromStatusDate;

            this.ValuesAtEndOfLastYearFromStatusDate = @valuesAtEndOfLastYearFromStatusDate;

            this.BalanceInfos = @balanceInfos;

        }
        [System.Text.Json.Serialization.JsonPropertyName("accounting")]
        [System.ComponentModel.DataAnnotations.Required]
        public AccountingIdentificationModel Accounting { get; }

        [System.Text.Json.Serialization.JsonPropertyName("accountNumber")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9A-Z\-+]{1,16}")]
        public string AccountNumber { get; }

        [System.Text.Json.Serialization.JsonPropertyName("accountName")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string AccountName { get; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.StringLength(512, MinimumLength = 1)]
        public string? Description { get; }

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        [System.ComponentModel.DataAnnotations.StringLength(4096, MinimumLength = 1)]
        public string? Note { get; }

        [System.Text.Json.Serialization.JsonPropertyName("statusDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public DateTimeOffset StatusDate { get; }

        [System.Text.Json.Serialization.JsonPropertyName("mailAddress")]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$")]
        public string? MailAddress { get; }

        [System.Text.Json.Serialization.JsonPropertyName("primaryPhone")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[\+]?[0-9\s]+$")]
        public string? PrimaryPhone { get; }

        [System.Text.Json.Serialization.JsonPropertyName("secondaryPhone")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[\+]?[0-9\s]+$")]
        public string? SecondaryPhone { get; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentTerm")]
        [System.ComponentModel.DataAnnotations.Required]
        public PaymentTermModel PaymentTerm { get; }

        [System.Text.Json.Serialization.JsonPropertyName("valuesAtStatusDate")]
        [System.ComponentModel.DataAnnotations.Required]
        public BalanceInfoValuesModel ValuesAtStatusDate { get; }

        [System.Text.Json.Serialization.JsonPropertyName("valuesAtEndOfLastMonthFromStatusDate")]
        [System.ComponentModel.DataAnnotations.Required]
        public BalanceInfoValuesModel ValuesAtEndOfLastMonthFromStatusDate { get; }

        [System.Text.Json.Serialization.JsonPropertyName("valuesAtEndOfLastYearFromStatusDate")]
        [System.ComponentModel.DataAnnotations.Required]
        public BalanceInfoValuesModel ValuesAtEndOfLastYearFromStatusDate { get; }

        [System.Text.Json.Serialization.JsonPropertyName("balanceInfos")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<BalanceInfoModel> BalanceInfos { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreditInfoModel
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CreditInfoModel(double @available, double @balance, double @credit, int @month, int @year)

        {

            this.Year = @year;

            this.Month = @month;

            this.Balance = @balance;

            this.Credit = @credit;

            this.Available = @available;

        }
        [System.Text.Json.Serialization.JsonPropertyName("year")]
        [System.ComponentModel.DataAnnotations.Range(1950, 2199)]
        public int Year { get; }

        [System.Text.Json.Serialization.JsonPropertyName("month")]
        [System.ComponentModel.DataAnnotations.Range(1, 12)]
        public int Month { get; }

        [System.Text.Json.Serialization.JsonPropertyName("balance")]
        public double Balance { get; }

        [System.Text.Json.Serialization.JsonPropertyName("credit")]
        [System.ComponentModel.DataAnnotations.Range(0D, 99999999D)]
        public double Credit { get; }

        [System.Text.Json.Serialization.JsonPropertyName("available")]
        public double Available { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreditInfoValuesModel
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public CreditInfoValuesModel(double @available, double @balance, double @credit)

        {

            this.Balance = @balance;

            this.Credit = @credit;

            this.Available = @available;

        }
        [System.Text.Json.Serialization.JsonPropertyName("balance")]
        public double Balance { get; }

        [System.Text.Json.Serialization.JsonPropertyName("credit")]
        public double Credit { get; }

        [System.Text.Json.Serialization.JsonPropertyName("available")]
        public double Available { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorModel
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ErrorModel(int @errorCode, string @errorMessage, string @errorType, string? @method, string? @validatingField, string? @validatingType)

        {

            this.ErrorCode = @errorCode;

            this.ErrorType = @errorType;

            this.ErrorMessage = @errorMessage;

            this.Method = @method;

            this.ValidatingType = @validatingType;

            this.ValidatingField = @validatingField;

        }
        [System.Text.Json.Serialization.JsonPropertyName("errorCode")]
        [System.ComponentModel.DataAnnotations.Range(1000, 9999)]
        public int ErrorCode { get; }

        [System.Text.Json.Serialization.JsonPropertyName("errorType")]
        [System.ComponentModel.DataAnnotations.Required]
        public string ErrorType { get; }

        [System.Text.Json.Serialization.JsonPropertyName("errorMessage")]
        [System.ComponentModel.DataAnnotations.Required]
        public string ErrorMessage { get; }

        [System.Text.Json.Serialization.JsonPropertyName("method")]
        public string? Method { get; }

        [System.Text.Json.Serialization.JsonPropertyName("validatingType")]
        public string? ValidatingType { get; }

        [System.Text.Json.Serialization.JsonPropertyName("validatingField")]
        public string? ValidatingField { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponseModel
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public ErrorResponseModel(string @error, string? @error_description, string? @error_uri, string? @state)

        {

            this.Error = @error;

            this.Error_description = @error_description;

            this.Error_uri = @error_uri;

            this.State = @state;

        }
        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(invalid_request|invalid_client|invalid_grant|invalid_scope|unauthorized_client|access_denied|unsupported_response_type|unsupported_grant_type|server_error|temporarily_unavailable){1}$")]
        public string Error { get; }

        [System.Text.Json.Serialization.JsonPropertyName("error_description")]
        public string? Error_description { get; }

        [System.Text.Json.Serialization.JsonPropertyName("error_uri")]
        public string? Error_uri { get; }

        [System.Text.Json.Serialization.JsonPropertyName("state")]
        public string? State { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JsonWebKeyModel
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public JsonWebKeyModel(string @alg, string? @d, string? @dp, string? @dq, string @e, string @kid, string @kty, string @n, string? @p, string? @q, string? @qi, string @use)

        {

            this.Kty = @kty;

            this.Use = @use;

            this.Alg = @alg;

            this.Kid = @kid;

            this.N = @n;

            this.E = @e;

            this.D = @d;

            this.Dp = @dp;

            this.Dq = @dq;

            this.P = @p;

            this.Q = @q;

            this.Qi = @qi;

        }
        [System.Text.Json.Serialization.JsonPropertyName("kty")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(EC|RSA|oct)$")]
        public string Kty { get; }

        [System.Text.Json.Serialization.JsonPropertyName("use")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(sig|enc)$")]
        public string Use { get; }

        [System.Text.Json.Serialization.JsonPropertyName("alg")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^(HS256|HS384|HS512|RS256|RS384|RS512|ES256|ES384|ES512|PS256|PS384|PS512|none)$")]
        public string Alg { get; }

        [System.Text.Json.Serialization.JsonPropertyName("kid")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Kid { get; }

        [System.Text.Json.Serialization.JsonPropertyName("n")]
        [System.ComponentModel.DataAnnotations.Required]
        public string N { get; }

        [System.Text.Json.Serialization.JsonPropertyName("e")]
        [System.ComponentModel.DataAnnotations.Required]
        public string E { get; }

        [System.Text.Json.Serialization.JsonPropertyName("d")]
        public string? D { get; }

        [System.Text.Json.Serialization.JsonPropertyName("dp")]
        public string? Dp { get; }

        [System.Text.Json.Serialization.JsonPropertyName("dq")]
        public string? Dq { get; }

        [System.Text.Json.Serialization.JsonPropertyName("p")]
        public string? P { get; }

        [System.Text.Json.Serialization.JsonPropertyName("q")]
        public string? Q { get; }

        [System.Text.Json.Serialization.JsonPropertyName("qi")]
        public string? Qi { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JsonWebKeySetModel
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public JsonWebKeySetModel(System.Collections.Generic.ICollection<JsonWebKeyModel> @keys)

        {

            this.Keys = @keys;

        }
        [System.Text.Json.Serialization.JsonPropertyName("keys")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<JsonWebKeyModel> Keys { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LetterHeadIdentificationModel
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public LetterHeadIdentificationModel(string @name, int @number)

        {

            this.Number = @number;

            this.Name = @name;

        }
        [System.Text.Json.Serialization.JsonPropertyName("number")]
        [System.ComponentModel.DataAnnotations.Range(1, 99)]
        public int Number { get; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string Name { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LetterHeadModel
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public LetterHeadModel(string? @companyIdentificationNumber, string @line1, string? @line2, string? @line3, string? @line4, string? @line5, string? @line6, string? @line7, string @name, int @number)

        {

            this.Number = @number;

            this.Name = @name;

            this.Line1 = @line1;

            this.Line2 = @line2;

            this.Line3 = @line3;

            this.Line4 = @line4;

            this.Line5 = @line5;

            this.Line6 = @line6;

            this.Line7 = @line7;

            this.CompanyIdentificationNumber = @companyIdentificationNumber;

        }
        [System.Text.Json.Serialization.JsonPropertyName("number")]
        [System.ComponentModel.DataAnnotations.Range(1, 99)]
        public int Number { get; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string Name { get; }

        [System.Text.Json.Serialization.JsonPropertyName("line1")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 1)]
        public string Line1 { get; }

        [System.Text.Json.Serialization.JsonPropertyName("line2")]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 1)]
        public string? Line2 { get; }

        [System.Text.Json.Serialization.JsonPropertyName("line3")]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 1)]
        public string? Line3 { get; }

        [System.Text.Json.Serialization.JsonPropertyName("line4")]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 1)]
        public string? Line4 { get; }

        [System.Text.Json.Serialization.JsonPropertyName("line5")]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 1)]
        public string? Line5 { get; }

        [System.Text.Json.Serialization.JsonPropertyName("line6")]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 1)]
        public string? Line6 { get; }

        [System.Text.Json.Serialization.JsonPropertyName("line7")]
        [System.ComponentModel.DataAnnotations.StringLength(64, MinimumLength = 1)]
        public string? Line7 { get; }

        [System.Text.Json.Serialization.JsonPropertyName("companyIdentificationNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(32, MinimumLength = 1)]
        public string? CompanyIdentificationNumber { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OpenIdProviderConfigurationModel
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public OpenIdProviderConfigurationModel(System.Collections.Generic.ICollection<string>? @acr_values_supported, string @authorization_endpoint, System.Collections.Generic.ICollection<string>? @claim_types_supported, System.Collections.Generic.ICollection<string>? @claims_locales_supported, bool? @claims_parameter_supported, System.Collections.Generic.ICollection<string>? @claims_supported, System.Collections.Generic.ICollection<string>? @display_values_supported, System.Collections.Generic.ICollection<string>? @grant_types_supported, System.Collections.Generic.ICollection<string>? @id_token_encryption_alg_values_supported, System.Collections.Generic.ICollection<string>? @id_token_encryption_enc_values_supported, System.Collections.Generic.ICollection<string> @id_token_signing_alg_values_supported, string @issuer, string @jwks_uri, string? @op_policy_uri, string? @op_tos_uri, string? @registration_endpoint, System.Collections.Generic.ICollection<string>? @request_object_encryption_alg_values_supported, System.Collections.Generic.ICollection<string>? @request_object_encryption_enc_values_supported, System.Collections.Generic.ICollection<string>? @request_object_signing_alg_values_supported, bool? @request_parameter_supported, bool? @request_uri_parameter_supported, bool? @require_request_uri_registration, System.Collections.Generic.ICollection<string>? @response_modes_supported, System.Collections.Generic.ICollection<string> @response_types_supported, System.Collections.Generic.ICollection<string>? @scopes_supported, string? @service_documentation, System.Collections.Generic.ICollection<string> @subject_types_supported, string @token_endpoint, System.Collections.Generic.ICollection<string>? @token_endpoint_auth_methods_supported, System.Collections.Generic.ICollection<string>? @token_endpoint_auth_signing_alg_values_supported, System.Collections.Generic.ICollection<string>? @ui_locales_supported, System.Collections.Generic.ICollection<string>? @userinfo_encryption_alg_values_supported, System.Collections.Generic.ICollection<string>? @userinfo_encryption_enc_values_supported, string? @userinfo_endpoint, System.Collections.Generic.ICollection<string>? @userinfo_signing_alg_values_supported)

        {

            this.Issuer = @issuer;

            this.Authorization_endpoint = @authorization_endpoint;

            this.Token_endpoint = @token_endpoint;

            this.Userinfo_endpoint = @userinfo_endpoint;

            this.Jwks_uri = @jwks_uri;

            this.Registration_endpoint = @registration_endpoint;

            this.Scopes_supported = @scopes_supported;

            this.Response_types_supported = @response_types_supported;

            this.Response_modes_supported = @response_modes_supported;

            this.Grant_types_supported = @grant_types_supported;

            this.Acr_values_supported = @acr_values_supported;

            this.Subject_types_supported = @subject_types_supported;

            this.Id_token_signing_alg_values_supported = @id_token_signing_alg_values_supported;

            this.Id_token_encryption_alg_values_supported = @id_token_encryption_alg_values_supported;

            this.Id_token_encryption_enc_values_supported = @id_token_encryption_enc_values_supported;

            this.Userinfo_signing_alg_values_supported = @userinfo_signing_alg_values_supported;

            this.Userinfo_encryption_alg_values_supported = @userinfo_encryption_alg_values_supported;

            this.Userinfo_encryption_enc_values_supported = @userinfo_encryption_enc_values_supported;

            this.Request_object_signing_alg_values_supported = @request_object_signing_alg_values_supported;

            this.Request_object_encryption_alg_values_supported = @request_object_encryption_alg_values_supported;

            this.Request_object_encryption_enc_values_supported = @request_object_encryption_enc_values_supported;

            this.Token_endpoint_auth_methods_supported = @token_endpoint_auth_methods_supported;

            this.Token_endpoint_auth_signing_alg_values_supported = @token_endpoint_auth_signing_alg_values_supported;

            this.Display_values_supported = @display_values_supported;

            this.Claim_types_supported = @claim_types_supported;

            this.Claims_supported = @claims_supported;

            this.Service_documentation = @service_documentation;

            this.Claims_locales_supported = @claims_locales_supported;

            this.Ui_locales_supported = @ui_locales_supported;

            this.Claims_parameter_supported = @claims_parameter_supported;

            this.Request_parameter_supported = @request_parameter_supported;

            this.Request_uri_parameter_supported = @request_uri_parameter_supported;

            this.Require_request_uri_registration = @require_request_uri_registration;

            this.Op_policy_uri = @op_policy_uri;

            this.Op_tos_uri = @op_tos_uri;

        }
        [System.Text.Json.Serialization.JsonPropertyName("issuer")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Issuer { get; }

        [System.Text.Json.Serialization.JsonPropertyName("authorization_endpoint")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Authorization_endpoint { get; }

        [System.Text.Json.Serialization.JsonPropertyName("token_endpoint")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Token_endpoint { get; }

        [System.Text.Json.Serialization.JsonPropertyName("userinfo_endpoint")]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string? Userinfo_endpoint { get; }

        [System.Text.Json.Serialization.JsonPropertyName("jwks_uri")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Jwks_uri { get; }

        [System.Text.Json.Serialization.JsonPropertyName("registration_endpoint")]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string? Registration_endpoint { get; }

        [System.Text.Json.Serialization.JsonPropertyName("scopes_supported")]
        public System.Collections.Generic.ICollection<string>? Scopes_supported { get; }

        [System.Text.Json.Serialization.JsonPropertyName("response_types_supported")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Response_types_supported { get; }

        [System.Text.Json.Serialization.JsonPropertyName("response_modes_supported")]
        public System.Collections.Generic.ICollection<string>? Response_modes_supported { get; }

        [System.Text.Json.Serialization.JsonPropertyName("grant_types_supported")]
        public System.Collections.Generic.ICollection<string>? Grant_types_supported { get; }

        [System.Text.Json.Serialization.JsonPropertyName("acr_values_supported")]
        public System.Collections.Generic.ICollection<string>? Acr_values_supported { get; }

        [System.Text.Json.Serialization.JsonPropertyName("subject_types_supported")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Subject_types_supported { get; }

        [System.Text.Json.Serialization.JsonPropertyName("id_token_signing_alg_values_supported")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Id_token_signing_alg_values_supported { get; }

        [System.Text.Json.Serialization.JsonPropertyName("id_token_encryption_alg_values_supported")]
        public System.Collections.Generic.ICollection<string>? Id_token_encryption_alg_values_supported { get; }

        [System.Text.Json.Serialization.JsonPropertyName("id_token_encryption_enc_values_supported")]
        public System.Collections.Generic.ICollection<string>? Id_token_encryption_enc_values_supported { get; }

        [System.Text.Json.Serialization.JsonPropertyName("userinfo_signing_alg_values_supported")]
        public System.Collections.Generic.ICollection<string>? Userinfo_signing_alg_values_supported { get; }

        [System.Text.Json.Serialization.JsonPropertyName("userinfo_encryption_alg_values_supported")]
        public System.Collections.Generic.ICollection<string>? Userinfo_encryption_alg_values_supported { get; }

        [System.Text.Json.Serialization.JsonPropertyName("userinfo_encryption_enc_values_supported")]
        public System.Collections.Generic.ICollection<string>? Userinfo_encryption_enc_values_supported { get; }

        [System.Text.Json.Serialization.JsonPropertyName("request_object_signing_alg_values_supported")]
        public System.Collections.Generic.ICollection<string>? Request_object_signing_alg_values_supported { get; }

        [System.Text.Json.Serialization.JsonPropertyName("request_object_encryption_alg_values_supported")]
        public System.Collections.Generic.ICollection<string>? Request_object_encryption_alg_values_supported { get; }

        [System.Text.Json.Serialization.JsonPropertyName("request_object_encryption_enc_values_supported")]
        public System.Collections.Generic.ICollection<string>? Request_object_encryption_enc_values_supported { get; }

        [System.Text.Json.Serialization.JsonPropertyName("token_endpoint_auth_methods_supported")]
        public System.Collections.Generic.ICollection<string>? Token_endpoint_auth_methods_supported { get; }

        [System.Text.Json.Serialization.JsonPropertyName("token_endpoint_auth_signing_alg_values_supported")]
        public System.Collections.Generic.ICollection<string>? Token_endpoint_auth_signing_alg_values_supported { get; }

        [System.Text.Json.Serialization.JsonPropertyName("display_values_supported")]
        public System.Collections.Generic.ICollection<string>? Display_values_supported { get; }

        [System.Text.Json.Serialization.JsonPropertyName("claim_types_supported")]
        public System.Collections.Generic.ICollection<string>? Claim_types_supported { get; }

        [System.Text.Json.Serialization.JsonPropertyName("claims_supported")]
        public System.Collections.Generic.ICollection<string>? Claims_supported { get; }

        [System.Text.Json.Serialization.JsonPropertyName("service_documentation")]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string? Service_documentation { get; }

        [System.Text.Json.Serialization.JsonPropertyName("claims_locales_supported")]
        public System.Collections.Generic.ICollection<string>? Claims_locales_supported { get; }

        [System.Text.Json.Serialization.JsonPropertyName("ui_locales_supported")]
        public System.Collections.Generic.ICollection<string>? Ui_locales_supported { get; }

        [System.Text.Json.Serialization.JsonPropertyName("claims_parameter_supported")]
        public bool? Claims_parameter_supported { get; }

        [System.Text.Json.Serialization.JsonPropertyName("request_parameter_supported")]
        public bool? Request_parameter_supported { get; }

        [System.Text.Json.Serialization.JsonPropertyName("request_uri_parameter_supported")]
        public bool? Request_uri_parameter_supported { get; }

        [System.Text.Json.Serialization.JsonPropertyName("require_request_uri_registration")]
        public bool? Require_request_uri_registration { get; }

        [System.Text.Json.Serialization.JsonPropertyName("op_policy_uri")]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string? Op_policy_uri { get; }

        [System.Text.Json.Serialization.JsonPropertyName("op_tos_uri")]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string? Op_tos_uri { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentTermModel
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PaymentTermModel(string @name, int @number)

        {

            this.Number = @number;

            this.Name = @name;

        }
        [System.Text.Json.Serialization.JsonPropertyName("number")]
        [System.ComponentModel.DataAnnotations.Range(1, 99)]
        public int Number { get; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string Name { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostingLineModel
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PostingLineModel(AccountIdentificationModel @account, CreditInfoValuesModel? @accountValuesAtPostingDate, AccountIdentificationModel? @budgetAccount, BudgetInfoValuesModel? @budgetAccountValuesAtPostingDate, AccountIdentificationModel? @contactAccount, BalanceInfoValuesModel? @contactAccountValuesAtPostingDate, double? @credit, double? @debit, string @details, System.Guid @identifier, DateTimeOffset @postingDate, string? @reference, int @sortOrder)

        {

            this.Identifier = @identifier;

            this.PostingDate = @postingDate;

            this.Reference = @reference;

            this.Account = @account;

            this.AccountValuesAtPostingDate = @accountValuesAtPostingDate;

            this.Details = @details;

            this.BudgetAccount = @budgetAccount;

            this.BudgetAccountValuesAtPostingDate = @budgetAccountValuesAtPostingDate;

            this.Debit = @debit;

            this.Credit = @credit;

            this.ContactAccount = @contactAccount;

            this.ContactAccountValuesAtPostingDate = @contactAccountValuesAtPostingDate;

            this.SortOrder = @sortOrder;

        }
        [System.Text.Json.Serialization.JsonPropertyName("identifier")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Identifier { get; }

        [System.Text.Json.Serialization.JsonPropertyName("postingDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public DateTimeOffset PostingDate { get; }

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string? Reference { get; }

        [System.Text.Json.Serialization.JsonPropertyName("account")]
        [System.ComponentModel.DataAnnotations.Required]
        public AccountIdentificationModel Account { get; }

        [System.Text.Json.Serialization.JsonPropertyName("accountValuesAtPostingDate")]
        public CreditInfoValuesModel? AccountValuesAtPostingDate { get; }

        [System.Text.Json.Serialization.JsonPropertyName("details")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string Details { get; }

        [System.Text.Json.Serialization.JsonPropertyName("budgetAccount")]
        public AccountIdentificationModel? BudgetAccount { get; }

        [System.Text.Json.Serialization.JsonPropertyName("budgetAccountValuesAtPostingDate")]
        public BudgetInfoValuesModel? BudgetAccountValuesAtPostingDate { get; }

        [System.Text.Json.Serialization.JsonPropertyName("debit")]
        [System.ComponentModel.DataAnnotations.Range(0D, 99999999D)]
        public double? Debit { get; }

        [System.Text.Json.Serialization.JsonPropertyName("credit")]
        [System.ComponentModel.DataAnnotations.Range(0D, 99999999D)]
        public double? Credit { get; }

        [System.Text.Json.Serialization.JsonPropertyName("contactAccount")]
        public AccountIdentificationModel? ContactAccount { get; }

        [System.Text.Json.Serialization.JsonPropertyName("contactAccountValuesAtPostingDate")]
        public BalanceInfoValuesModel? ContactAccountValuesAtPostingDate { get; }

        [System.Text.Json.Serialization.JsonPropertyName("sortOrder")]
        [System.ComponentModel.DataAnnotations.Range(0, 9999999)]
        public int SortOrder { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostingWarningModel
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public PostingWarningModel(AccountIdentificationModel @account, double @amount, PostingLineModel @postingLine, PostingWarningReason @reason)

        {

            this.Reason = @reason;

            this.Account = @account;

            this.Amount = @amount;

            this.PostingLine = @postingLine;

        }
        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PostingWarningReason Reason { get; }

        [System.Text.Json.Serialization.JsonPropertyName("account")]
        [System.ComponentModel.DataAnnotations.Required]
        public AccountIdentificationModel Account { get; }

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        [System.ComponentModel.DataAnnotations.Range(-99999999D, 99999999D)]
        public double Amount { get; }

        [System.Text.Json.Serialization.JsonPropertyName("postingLine")]
        [System.ComponentModel.DataAnnotations.Required]
        public PostingLineModel PostingLine { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PostingWarningReason
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AccountIsOverdrawn")]
        AccountIsOverdrawn = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ExpectedIncomeHasNotBeenReachedYet")]
        ExpectedIncomeHasNotBeenReachedYet = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ExpectedExpensesHaveAlreadyBeenReached")]
        ExpectedExpensesHaveAlreadyBeenReached = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable? _client;
        private System.IDisposable? _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable? client, System.IDisposable? response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WebApiClientException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public WebApiClientException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WebApiClientException<TResult> : WebApiClientException
    {
        public TResult Result { get; private set; }

        public WebApiClientException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625